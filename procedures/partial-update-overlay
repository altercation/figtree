#!/bin/bash

# figtree; an Arch Linux AIF module to create conFIG TREEs from local or remote profiles
# Ethan Schoonover <es@ethanschoonover.com>
# Please see the http://ethanschoonover.com/figtree for details and usage

# this procedure updates the overlay files from a live, production system to an 
# aif profile directory

# ----------------------------------------------------------------------
# procedure specific definitions
# ----------------------------------------------------------------------

depend_procedure figtree automatic

var_MODULE_NAME=figtree
var_PROCEDURE_SUBPATH=/procedures/partial-update-overlay
var_AIF_PROCEDURE_PATH="$procedure"; [[ "$module" == "http" ]] && var_AIF_PROCEDURE_PATH="$2"
var_MODULE_PATHS=("${var_AIF_PROCEDURE_PATH%$var_PROCEDURE_SUBPATH*}" "/usr/lib/aif/user/figtree")
var_FORCE_OVERWRITE=
var_NO_BACKUPS=
var_OPTS_STRING="c:fn"

# ----------------------------------------------------------------------
# PHASE WORKER CUSTOMIZATIONS
# ----------------------------------------------------------------------
# we reorder phase_preparation so that if we're running as a local 
# procedure from install media, we set up the network first and bring in
# the required runtime packages (primarily for our vcs remote sourcing)
# phase_basics=(set_clock prepare_disks) # defaults, here for reference during module development
# phase_system=(package_list install_packages configure_system install_bootloader) # defaults, here for reference
# phase_finish=(msg_report) # defaults, for reference
#
phase_preparation=(preconfigure intro configure)
phase_basics=()
phase_system=(write_overlay) # module specific custom workers (see below)

# ----------------------------------------------------------------------
# aif.sh related functions
# ----------------------------------------------------------------------

process_args ()
{
    dfunc
    case $1 in
        -f) var_FORCE_OVERWRITE=1 ;;
        -n) var_NO_BACKUPS=1 ;;
        -c) [[ -n "$2" ]] && var_AUTOMATIC_PROFILE=$2 || die_error "You must specify an aif config profile when using the -c flag." ;;
        *) usage && exit 5 ;;
    esac
}

read -r -d '' var_ARGS_USAGE <<-'EOF'
========================================================================
Partial AIF procedure: figtree partial-update-overlay
------------------------------------------------------------------------
Usage examples:
------------------------------------------------------------------------

This partial procedure updates the overlay files associated with a 
figtree profile. A profile might be in:

    /usr/lib/aif/user/figtree/profiles/my-laptop

or a more scope limited profile:

    /usr/lib/aif/user/figtree/systems/make/model

The profile file itself is usually a file named "profile" in the 
directories listed above:

    /usr/lib/aif/user/figtree/profiles/my-laptop/profile

and the overlay directory is always in the same directory as the
profile file, thus:

    /usr/lib/aif/user/figtree/profiles/my-laptop/overlay

This procedure *must* be run against a local profile (the procedure can
be called remotely, in which case you should be careful to specify a
full path such as /usr/lib/aif/user/figtree/profiles/my-laptop on the
command line.

LOCAL PROCEDURE & LOCAL, RELATIVE PROFILE PATH
aif -p figtree/automatic -c profiles/my-desktop
aif -p figtree/automatic -c systems/lenovo/x220

LOCAL PROCEDURE & LOCAL, ABSOLUTE PROFILE PATH
aif -p figtree/automatic -c /tmp/aif/systems/lenovo/x220

REMOTE PROCEDURE & LOCAL PROFILE
aif -p http://github.com/user/figtree/raw/master/procedures/automatic \
    -c /usr/lib/aif/user/figtree/profiles/my-laptop

------------------------------------------------------------------------
Options:
------------------------------------------------------------------------

-c profile/path:    Specify a profile path.
                    The path may specified in the following formats:

                    relative: profiles/my-laptop
                    absolute: ~/aif-files/figtree/profiles/my-laptop

                    Note that the full figtree procedures such as 
                    "automatic" can also use a remote path, but as we
                    require local write access, this is not usable for
                    this partial procedure)

-f                  Force overwrite mode (DANGER!)
                    Does not prompt for action when scanning files;
                    simply overwrites all overlay files in the target
                    profile subdirectory. Overwritten files will be
                    backed up unless the -n command line parameter is
                    also specified.

-n                  No backup file. When writing an overlay file, any
                    existing overlay file in that directory with the
                    same name will normally be backed up first. Use of
                    the '-n' parameter will stop backups from being
                    written; use with caution or with version control!

------------------------------------------------------------------------
EOF

# ----------------------------------------------------------------------
# procedure workers
# ----------------------------------------------------------------------

worker_preconfigure ()
{
    var_UI_TYPE=${arg_ui_type:-cli}
    ui_init
}

worker_intro ()
{
    local procname="$var_MODULE_NAME $(basename $var_AIF_PROCEDURE_PATH)"
    if [[ -n "$var_NO_BACKUPS" ]]
    then
            local backup_warning="Backups are OFF! No backup files will be created when overwriting overlay files."
    else
            local backup_warning="Backups are ON. Original overlay files will be renamed and saved with a backup suffix during overwrite procedures."
    fi
    if [[ -n "$var_FORCE_OVERWRITE" ]]
    then
            inform "\nRUNNING THE $(toupper "$procname") PROCEDURE IN FORCE-OVERWRITE MODE."
            notify "Overlay files in the profile directory will be *COMPLETELY AND AUTOMATICALLY OVERWRITTEN WITH THE CURRENT, LIVE VERSION OF THE OVERLAY FILE!"
            inform "$backup_warning"
            ask_yesno "Do you want to continue?" no || exit
    else
            inform "\nRUNNING THE $(toupper "$procname") PROCEDURE IN QUERY MODE (NORMAL)."
            inform "Overlay files will be scanned and you will be presented with a series of choices regarding each based on the current state of the profile overlay."
            inform "$backup_warning"
            ask_yesno "Do you want to continue?" yes || exit
    fi
}

worker_write_overlay()
{
    inform "Overlay write started..."
    # TODO: consider just moving/copying *all* files in overlay without any specification, or perhaps allow a special overlay value of "*"
    # TODO: we might need to set certain permissions, but i'd rather leave this for the misc step
    #       i could also make the system_misc function or worker process an array of commands; here we use installs permissions arg
    dfunc
    local overlay_file=
    for overlay_file in $var_OVERLAY_FILES
    do
        write_overlay_file "$overlay_file"
    done
}

write_overlay_file()
{
    local overlay_file="$1"
    # TODO: the following substitution performs differently in script vs command line;
    # command line *requires* last slash to be escaped like this:
    # from_path="${overlay_file/\/\//\/}"
    # script *requires* last slash to *not* be escaped, so we use that here
    to_path="${overlay_file/\/\///}"
    from_path="$var_SOURCE_DIR/${overlay_file#*\/\/}"
    
    if [[ ! -f "$from_path" ]]
    then
        show_warning "NO OVERLAY FILE SOURCE" "Profile overlay requests non-existant source file: \"$from_path\""
        return 1
    elif [[ ! -f "$to_path" ]]
    then
        ask_yesno "No overlay file present. Copy current $from_path to overlay?" yes || return 0
        # TODO: PERMISSIONS ARE GOING TO BE SCREWED UP!
        cp "$from_path" "$to_path"
    elif install -C -D -S ".figtree.old" -v -T "$from_path" "$to_path" &>/dev/null
    then
        inform "Successful write of overlay file \"$overlay_file\""
        return 0
    else
        show_warning "CRITICAL OVERLAY FILE ERROR" "Failed to overlay file from \"$from_path\" to \"$to_path\""
        return 1
    fi
}
