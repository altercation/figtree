#!/bin/bash

# figtree; an Arch Linux AIF module to create conFIG TREEs from local or remote profiles
# Ethan Schoonover <es@ethanschoonover.com>
# Please see the http://ethanschoonover.com/figtree for details and usage

# this procedure updates the overlay files from a live, production system to an 
# aif profile directory

# ----------------------------------------------------------------------
# procedure specific definitions
# ----------------------------------------------------------------------

depend_procedure figtree automatic

var_MODULE_NAME=figtree
var_PROCEDURE_SUBPATH=/procedures/partial-update-overlay
var_AIF_PROCEDURE_PATH="$procedure"; [[ "$module" == "http" ]] && var_AIF_PROCEDURE_PATH="$2"
var_MODULE_PATHS=("${var_AIF_PROCEDURE_PATH%$var_PROCEDURE_SUBPATH*}" "/usr/lib/aif/user/figtree")
var_FORCE_OVERWRITE=
var_NO_BACKUPS=
var_OPTS_STRING="c:fnwDR"

# ----------------------------------------------------------------------
# PHASE WORKER CUSTOMIZATIONS
# ----------------------------------------------------------------------
# we reorder phase_preparation so that if we're running as a local 
# procedure from install media, we set up the network first and bring in
# the required runtime packages (primarily for our vcs remote sourcing)
# phase_basics=(set_clock prepare_disks) # defaults, here for reference during module development
# phase_system=(package_list install_packages configure_system install_bootloader) # defaults, here for reference
# phase_finish=(msg_report) # defaults, for reference
#
phase_preparation=(preconfigure intro configure)
phase_basics=()
phase_system=(write_overlay) # module specific custom workers (see below)

# ----------------------------------------------------------------------
# aif.sh related functions
# ----------------------------------------------------------------------

var_WIPE_OVERLAY=
var_FORCE_OVERWRITE=
var_NO_BACKUPS=
var_DIFFS=
var_RECURSIVE=

process_args ()
{
    dfunc
    case $1 in
        -w) var_WIPE_OVERLAY=1 ;;
        -f) var_FORCE_OVERWRITE=1 ;;
        -n) var_NO_BACKUPS=1 ;;
        -D) var_DIFFS=1 ;;
        -R) var_RECURSIVE=1 ;;
        -c) [[ -n "$2" ]] && var_PARTIAL_PROFILE=$2 || die_error "You must specify an aif config profile when using the -c flag." ;;
        *) usage && exit 5 ;;
    esac
}

read -r -d '' var_ARGS_USAGE <<-'EOF'
========================================================================
Partial AIF procedure: figtree partial-update-overlay
------------------------------------------------------------------------
Usage examples:
------------------------------------------------------------------------

This partial procedure updates the overlay files associated with a 
figtree profile. A profile might be in:

    /usr/lib/aif/user/figtree/profiles/my-laptop

or a more scope limited profile:

    /usr/lib/aif/user/figtree/systems/make/model

The profile file itself is usually a file named "profile" in the 
directories listed above:

    /usr/lib/aif/user/figtree/profiles/my-laptop/profile

and the overlay directory is always in the same directory as the
profile file, thus:

    /usr/lib/aif/user/figtree/profiles/my-laptop/overlay

This procedure *must* be run against a local profile (the procedure can
be called remotely, in which case you should be careful to specify a
full path such as /usr/lib/aif/user/figtree/profiles/my-laptop on the
command line.

LOCAL PROCEDURE & LOCAL, RELATIVE PROFILE PATH
aif -p figtree/automatic -c profiles/my-desktop
aif -p figtree/automatic -c systems/lenovo/x220

LOCAL PROCEDURE & LOCAL, ABSOLUTE PROFILE PATH
aif -p figtree/automatic -c /tmp/aif/systems/lenovo/x220

REMOTE PROCEDURE & LOCAL PROFILE
aif -p http://github.com/user/figtree/raw/master/procedures/automatic \
    -c /usr/lib/aif/user/figtree/profiles/my-laptop

------------------------------------------------------------------------
Options:
------------------------------------------------------------------------

-c profile/path:    Specify a profile path.
                    The path may specified in the following formats:

                    relative: profiles/my-laptop
                    absolute: ~/aif-files/figtree/profiles/my-laptop

                    Note that the full figtree procedures such as 
                    "automatic" can also use a remote path, but as we
                    require local write access, this is not usable for
                    this partial procedure)

-w                  Wipe overwrite directory (DANGER!)
                    Completely removes existing overlay directory
                    prior to copying new overlay files over. Will
                    operate recursively if the -r parameter is also
                    present. Be careful! Use version control.

-f                  Force overwrite mode (DANGER!)
                    Does not prompt for action when scanning files;
                    simply overwrites all overlay files in the target
                    profile subdirectory. Overwritten files will be
                    backed up unless the -n command line parameter is
                    also specified.

-F                  Force clean overlay mode (DOUBLE DANGER!)
                    Completely erases the existing overlay directory!
                    Danger danger danger! All existing overlay data
                    will be removed. No prompts will be given.

-n                  No backup file. When writing an overlay file, any
                    existing overlay file in that directory with the
                    same name will normally be backed up first. Use of
                    the '-n' parameter will stop backups from being
                    written; use with caution or with version control!

-D                  Report file diff before prompting for (or forcing)
                    file overwrite.

-R                  Recursive. All profiles referenced by master
                    profiles will be processed by the procedure. Note
                    that the full figtree procedures such as automatic
                    are always recursive. This partial procedure
                    normally operates on a single profile but can be
                    forced into recursive mode using this parameter.

------------------------------------------------------------------------
EOF

# ----------------------------------------------------------------------
# procedure workers
# ----------------------------------------------------------------------

worker_intro ()
{
    local procname="$var_MODULE_NAME $(basename $var_AIF_PROCEDURE_PATH)"
    local default=yes
    if [[ -n "$var_WIPE_OVERLAY" ]]; then
            intro+="\n -w  Wipe overlay directory is ON. Overlay directory will be COMPLETELY REMOVED Prior to write."
            local default=no
    else
            intro+="\n(-w) Wipe overlay directory is off. Overlay directory will remain intact prior to write."
    fi
    if [[ -n "$var_FORCE_OVERWRITE" ]]; then
            intro+="\n -f  Force overwrite is ON. NO PROMPTS Will be given and all OVERWRITES WILL BE MADE."
            local default=no
    else
            intro+="\n(-f) Force overwrite is off. Prompts will be given prior to any change."
    fi
    if [[ -n "$var_NO_BACKUPS" ]]
    then
            intro+="\n -b  No-backups mode is ON. NO BACKUP FILES Will be created during overwrites."
            local default=no
    else
            intro+="\n(-b) No-backup mode is off. Backups will be created during any overwrite."
    fi
    if [[ -n "$var_RECURSIVE" ]]
    then
            intro+="\n -R  Recursive mode is ON. ALL LINKED PROFILES Will be processed."
            recursive_note=" and all recursively linked profiles"
            local default=no
    else
            intro+="\n(-R) Recursive mode is off. No linked profiles will be processed."
            recursive_note=
    fi
    if [[ -n "$var_DIFFS" ]]; then
            intro+="\n -d  Diff mode is ON. Diffs will be displayed prior to file overwrite."
    else
            intro+="\n(-d) Diff mode is off. No diff information will be shown."
    fi
    inform "\nRUNNING THE $(toupper "$procname") PROCEDURE"
    inform "\nSourcing profile ${var_PARTIAL_PROFILE}${recursive_note}"
    inform "${intro}\n"
    ask_yesno "Do you want to continue?" $default || exit
}

worker_configure ()
{
    # LOAD PROFILE
    [[ -z "$var_PARTIAL_PROFILE" ]] && \
        die_error "You must specify a config file (-c profile/path) to use this procedure. Run this procedure again with -h for more details."
    load_profile $var_PARTIAL_PROFILE || \
        die_error "Failed to load profile $var_PARTIAL_PROFILE from paths $var_MODULE_PATHS"
}


worker_write_overlay()
{
    inform "Overlay write started..."
    # TODO: consider just moving/copying *all* files in overlay without any specification, or perhaps allow a special overlay value of "*"
    # TODO: we might need to set certain permissions, but i'd rather leave this for the misc step
    #       i could also make the system_misc function or worker process an array of commands; here we use installs permissions arg
    dfunc
    local overlay_file=
    for overlay_file in $var_OVERLAY_FILES; do write_overlay_file "$overlay_file"; done
    for module_root in ${var_MODULE_PATHS[@]}
    do
        chmod --recursive --reference=$module_root $(dirname $module_root)
        chown --recursive --reference=$module_root $(dirname $module_root)
    done
}

write_overlay_file()
{
    local overlay_file="$1"
    # TODO: the following substitution performs differently in script vs command line;
    # command line *requires* last slash to be escaped like this:
    # from_path="${overlay_file/\/\//\/}"
    # script *requires* last slash to *not* be escaped, so we use that here
    to_path="${overlay_file/\/\///}"
    from_path="$var_SOURCE_DIR/${overlay_file#*\/\/}"
    if [[ -z "$var_FORCE_OVERWRITE" ]]
    then
        if [[ ! -f "$from_path" ]]; then
            show_warning "NO OVERLAY FILE SOURCE" "Profile overlay requests non-existant source file: \"$from_path\""; return 1
        elif [[ ! -f "$to_path" ]]; then
            ask_yesno "No overlay file present. Copy current $from_path to $to_path" yes || return 0
        elif [[ -n "$var_NO_BACKUPS" ]]; then
            ask_yesno "Overlay file present. Copy current $from_path to $to_path? NO BACKUP WILL BE CREATED." no || return 0
        else
            ask_yesno "Overlay file present. Copy current $from_path to $to_path? Backup will be created." yes || return 0
        fi
    fi
    if [[ -n "$var_NO_BACKUPS" ]]
    then
        # install cmd is 
        local install_cmd='install --backup=none -C -D -v -T '
    else
        # install cmd is
        local install_cmd='install --backup=numbered -C -D -v -T '
    fi
    if $install_cmd "$from_path" "$to_path" &>/dev/null
    then
        inform "Successful update of overlay file from \"$from_path\" to \"$to_path\""; return 0
    else
        show_warning "CRITICAL OVERLAY FILE ERROR" "Failed to overlay file from \"$from_path\" to \"$to_path\""; return 1
    fi
}
