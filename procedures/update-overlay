#!/bin/bash

# Ethan Schoonover <es@ethanschoonover.com>

# ----------------------------------------------------------------------
# procedure specific definitions
# ----------------------------------------------------------------------
phase_preparation=(intro update_files)
phase_finish=(msg_report)

read -r -d '' var_ARGS_USAGE <<-'EOF'
-s <make/model>:    Specify a make/model prototype AIF system profile to install. If specified as simply "make/model" the path of the 
                    archproto module as specified in the -p parameter will be used. This allows for specifying the following:

                        aif -p archproto/automatic -s lenovo/x120e

                    and aif will automatically source the system profile from:
EOF

# ----------------------------------------------------------------------
# procedure workers
# ----------------------------------------------------------------------

worker_intro ()
{

notify "\
===============================================================================\n\
AIF archproto automatic procedure using initial profile:\n\
$var_AIF_PROCEDURE_PATH\n\
===============================================================================\n"
}

process_args ()
{
    echo "HERE!!"
    dfunc
    var_AUTOMATIC_PROFILE=
    while [[ -n $1 ]]
    do
        case $1 in
            -c) [[ -n "$2" ]] && var_AUTOMATIC_PROFILE=$2; shift 2; echo "profile found" || die_error "You must specify an aif config profile when using the -c flag." ;;
            -d) var_DIFFONLY=true; echo "DIFFONLY"; shift ;;
            -f) var_FORCE=true; echo "FORCE"; shift ;;
            *) usage && exit 5 ;;
        esac
    done
}
exit

# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# library functions
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# These should ideally be stored in the module libs directory as an
# actual function library, but as we are loading the procedure remotely
# it's better to bundle them here. Alternately we could try to 
# manufacture a libs path from the remote procedure, but this adds
# potentially needless complexity. TODO: consider breaking out a 
# separate lib and creating a remote lib sourcing function in future

# ----------------------------------------------------------------------
# lib-utilities
# ----------------------------------------------------------------------
# gneral utility functions

d() { debug PROCEDURE "$1"; }
dstate() { d "ARCHPROTO STATECHK: $1 is currently: ${!1}"; }
dfunc()
{
    # quick debug function, better info than "caller"
    # called without parameters at top of function; reports where it was called 
    # from (calling function and line number)
    [[ $1 ]] && local with_args=" with arguments \"$@\"" || local with_args=""
    d "ARCHPROTO FUNCTION: ${FUNCNAME[1]}() called at line ${BASH_LINENO[1]} by ${FUNCNAME[2]}${with_args}"
}

debug_report_values()
{
    echo "================================================================================"
    local valuelist=$@
    for valname in $valuelist
    do
        echo "$valname=${!valname}"
    done
    echo "================================================================================"
    echo "enter to continue..."
    read answer
}

debug_report_next()
{
    echo "================================================================================"
    echo "about to execute:"
    echo "$*"
    echo "================================================================================"
    echo "enter to continue..."
    read answer
}

strip_punct()
{
    local stripped="$*"; stripped="${stripped#[[:punct:]]}"; stripped="${stripped%[[:punct:]]}"; echo -n "$stripped"
}

unquote()
{
    local stripped="$*"; stripped="${stripped#\"}"; stripped="${stripped%\"}"; echo -n "$stripped"
}

set_profile_or_default_values ()
{
    dfunc "$*"
    local valuelist=$@
    for valname in $valuelist
    do
        defaultval=default_$valname
        if [[ -z ${!valname} ]]
        then
                if declare | grep -q "$valname=("
                then # array
                    eval eval $valname="(\${default_$valname[*]})"
                else # normal variable
                    eval $valname=\'${!defaultval}\'
                fi
                inform "Using default procedure defined value for $valname"
        else
                inform "Using profile defined value for $valname"
        fi
    done
}


# ----------------------------------------------------------------------
# lib-fileprocessing
# ----------------------------------------------------------------------
# functions related to loading and processing configuration profiles
#
source_and_overlay()
{
    # TODO: consider refactoring this to an array
    dfunc "$*"
    local revert_overlay=$var_OVERLAY_PATH
    var_OVERLAY_PATH="$(dirname "$1")/overlay"
    source "$1" && inform "ARCHPROTO PROFILE: Successfully processed profile:\n${1#$var_TEMP_DIR}" \
                || die_error "ARCHPROTO PROFILE: Failed to process profile \"$1\"."
    var_OVERLAY_PATH=$revert_overlay
} 

make_local ()
{
    # takes a remote repo path and returns a local path (dies if repo can't be cloned)
    local  __returnvarname=${2:-} # can take a variable name to assign result to (otherwise returns value via echo

    dfunc

    # repo remote is almost certainly never going to be an actual repo path
    # but rather a full path to a file in a repo. This is complicated by the fact that we want to provide aif an actual file for it's initial procedure and
    # subsequently use that repo information (extracted from the raw path). The infix values below should clean this up for us, but needs more testing
    local full_path_remote=$1

    # detect/set repo_type
    local repo_type=${var_REPO_TYPE:-} # from optional -r command line argument
    if [[ -n "$repo_type" ]]; then : # $repo_type already set
    elif [ $(expr "$full_path_remote" : 'https*://.*github.com') -gt 0 ]; then repo_type=git
    elif [ $(expr "$full_path_remote" : '.*/git/') -gt 0 ]; then repo_type=git
    elif [ $(expr "$full_path_remote" : 'https*://.*bitbucket.org') -gt 0 ]; then repo_type=hg
    elif [ $(expr "$full_path_remote" : '.*/hg/') -gt 0 ]; then repo_type=hg
    elif [ $(expr "$full_path_remote" : '.*/mercurial/') -gt 0 ]; then repo_type=hg
    elif [ $(expr "$full_path_remote" : 'https*://code.google.com') -gt 0 ]; then repo_type=svn
    elif [ $(expr "$full_path_remote" : '.*/trunk/') -gt 0 ]; then repo_type=svn
    elif [ $(expr "$full_path_remote" : '.*/svn/') -gt 0 ]; then repo_type=svn
    fi

    # now set the repo clone command, infix to strip out github/bitbucket raw file path values, and any suffix required to clone (.git)
    local repo_command=
    local repo_suffix=
    local repo_infix=
    case $repo_type in
        git)
                repo_command="git clone --depth=0"
                repo_suffix=".git"
                repo_infix="raw[./][^/]*/" # raw/master/
        ;;
        hg|mercurial)
                repo_command="hg clone"
                repo_infix="raw[./][^/]*/[^/]*/" # raw/32dc76fda832/src/
        ;;
        svn)
                repo_command="svn checkout"
                # google code, at least, doesn't stick in any infixes for the raw file
                # but does present a different url for the raw file. this url works for cloning, however
                # http://code.google.com/p/googlecl/source/browse/trunk/INSTALL.txt
                # http://googlecl.googlecode.com/svn/trunk/INSTALL.txt
                # I haven't tested other svn services yet
        ;;
    esac

    # strip infix out of remote path, allowing us to just use makelocal after this
    # all paths passed to this function must be treated as suspect as any of them
    # could be raw format paths. for example, this converts the following github url:
    # PRE INFIX STRIP:  http://github.com/altercation/archproto/raw/master/procedures/automatic/systems/lenovo/x220
    # POST INFIX STRIP: http://github.com/altercation/archproto/procedures/automatic/systems/lenovo/x220
    full_path_remote=$(echo -n "$full_path_remote" | sed "s^$repo_infix^^")

    # at this point, we have cleaned up our full remote path and identified what kind of repo it is
    # the repo may still be already cloned locally. normally if the user specifies a full remote
    # procedure path and then a relative path for the profile, we will add the local repo module
    # root to our var_MODULE_PATHS array and won't normally have to double check if the repo is already
    # present. However, if someone passes identical repo paths in both the aif procedure command line
    # argument and the profile argument (or embedded in a depend_profile command in a profile), we
    # need to be ready to handle it here

    # make a local path for the profile file for an initial file check and, failing that, cloning, for example:
    # REMOTE:                       http://github.com/altercation/archproto/procedures/automatic/systems/lenovo/x220
    # LOCAL:  /tmp/aif/archproto-temp/github.com/altercation/archproto/procedures/automatic/systems/lenovo/x220
    local full_path_local="$var_TEMP_DIR/${full_path_remote:$(expr "$full_path_remote" : 'https*://')}"

    # we can now use that profile path to clone the remote repo by cloning, failing, and trimming until we get down to the actual repo root.
    # this is a bit brute force and we could be smarter about it if we wanted to supply an actual template for the repo root, for example
    # github's pattern is github.com/username/reponame
    # that's left for a later optimization round. even with that we should support private repository urls (or unknown or less popular services)
    # that have unknown URL formats. brute force try/trim/iterate does this for now.

    local repo_remote="$full_path_remote" # initial repo_remote assignment
    local repo_local="$var_TEMP_DIR/${repo_remote:$(expr "$repo_remote" : 'https*://')}"

    while [[ -n "$repo_remote" && ${#repo_remote} > 1 ]]; do # loop till we trim too much, indicating profound failure

        if [[ -e "$full_path_local" ]]; then # found local file
            [[ "$__returnvarname" ]] && eval $__returnvarname="'$full_path_local'" || echo "$full_path_remote"
            return 0
        elif $repo_command $repo_remote $repo_local &>/dev/null; then # successful clone
                # we return the local path and load_profile can handle adding it to the path
                [[ "$__returnvarname" ]] && eval $__returnvarname="'$full_path_local'" || echo "$full_path_remote"
                return 0
        else # clone failed
                rm -rf "$(dirname $repo_local)" # clean up bad repo path
        fi

        # trim and retry
        repo_remote=$(dirname "$repo_remote")
        repo_local="$var_TEMP_DIR/${repo_remote:$(expr "$repo_remote" : 'https*://')}"
    done; die_error "failed to download repo from path $1"
}

update_modulepaths_from_profilepath()
{
    dfunc "$*"
    # expects parameters:
    # $1: a local absolute path or http remote *profile* path we need to make some assumptions about either the depth of all profile paths or standard names 
    # such as procedure, systems, etc. this is the trickiest assumption we make and the only other option I see is to never allow a relative path, which is silly.
    # requires state: $var_KNOWN_SUBDIRS
    # modifies state: $var_MODULE_PATHS
    local module_path=${1%profile} # strip profile
    module_path=${module_path%/} # strip trailing slash
    while [[ -n "$module_path" && ${#module_path} > 1 ]]; do
        for known_subdir in ${var_KNOWN_SUBDIRS[@]}; do
            if [[ "$(basename $module_path)" == "$known_subdir" ]]
            then
                # we have a match and assume we are one level away from root || trim and loop
                module_path="$(dirname $module_path)"
                # now check to see if this path is already in var_MODULE_PATHS
                for test_path in ${var_MODULE_PATHS[@]}; do [[ "$test_path" == "$module_path" ]] && return 0; done
                # still here, add path to var_MODULE_PATHS
                var_MODULE_PATHS=("$module_path" "${var_MODULE_PATHS[@]}")
                d "ARCHPROTO STATECHK: var_MODULE_PATHS updated to: ${var_MODULE_PATHS[*]}"
                return 0
            fi
        done
        module_path="$(dirname $module_path)" # no match, trim a level
    done
    # if we are still here then we didn't find a "known subdir"... best to error out here, though another option is to just strip the last two / three 
    # path components. we could try to standardize all "known" subdir formats to: modulename/knownsubidr/category/specificprofile, eg:
    # archproto/systems/lenovo/x220 or archproto/environments/xmonad/es
    die_error "failed to find known subdirectory (one of ${var_KNOWN_SUBDIRS[@]}) in path $1;"
}

load_profile()
{
    dfunc "$*"
    # arguments:
    # $1 (assigned to profile_path): a path, either relative, absolute local or remote URL
    # $2 is the *original* type of profile (relative, remote, absolute) and is only set from insid the function
    # expects/uses state:
    # OVERLAY: current value of OVERLAY directory path
    # var MODULE_PATHS: array of paths to use, in order, as module roots with relative paths
    local profile_path=${1%/} # strips any trailing slash
    local profile_type=${2:-} # only used internally in this function
    if [[ "${profile_path:0:1}" == "/" ]]; then # absolute local path
        # add to module paths (thus if we've donwloaded a repo, we'll check locally next time)
        [[ "${profile_type}" != "xrelative" ]] && update_modulepaths_from_profilepath "$profile_path"
        [[ -d "${profile_path}" ]] && profile_path="$profile_path/profile"
        [[ -f "${profile_path}" ]] && source_and_overlay "$profile_path" || return 1
    elif [[ "${profile_path:0:4}" == "http" ]]; then # remote url, could be http or https with this match
        if make_local $profile_path profile_path_local
        then
                d "ARCHPROTO PROFILES: preparing to load profile $profile_path_local"
                load_profile "$profile_path_local" ${profile_type:-http} || return 1
        else
                die_error "should definitely not reach this error. there was a problem getting the local profile path from a remote repo."
        fi
    else # assumed relative path (e.g. profiles/profilename)
        for module_root in ${var_MODULE_PATHS[@]}; do load_profile "${module_root%/}/${profile_path#/}" "relative" && return 0; done; return 1
    fi
}

select_profile ()
{
    true
    # for future use in an interative procedure
}

# ----------------------------------------------------------------------
# lib-profiles
# ----------------------------------------------------------------------
# functions to support archproto profiles

depend_profile() {
    #TODO: check array of previously loaded profiles; prevent infinite recursion
    load_profile "$1";
}
add_package() { dfunc; [[ -n "$*" ]] && TARGET_PACKAGES+="$*"; dstate TARGET_PACKAGES; }
add_configs() { dfunc; [[ -n "$*" ]] && CONFIG_CHANGES+="$*"; dstate CONFIG_CHANGES; }
add_overlay()
{
    dfunc
    if [[ -n "$*" ]]
    then
        for overlay_file in $*
        do
            var_OVERLAY_FILES+=" $var_OVERLAY_PATH//${overlay_file#/}" # strip any leading slash (should have one) and add a double slash
        done
    fi
    dstate var_OVERLAY_FILES;
}
system_misc() { dfunc; } # this can be overidden in a user profile (note that only final override executes)

# ----------------------------------------------------------------------
# lib-config
# ----------------------------------------------------------------------
# functions to work with configuration files and values
write_configs()
{
        dfunc
        # iterate through array of config changes
        # write changes using augeas or custom function
}

write_overlay()
{
        # TODO: consider just moving/copying *all* files in overlay without any specification, or perhaps allow a special overlay value of "*"
        # TODO: we might need to set certain permissions, but i'd rather leave this for the misc step
        #       i could also make the system_misc function or worker process an array of commands; here we use installs permissions arg
        dfunc
        echo "TARGET=$var_TARGET_DIR"
        for overlay_file in $var_OVERLAY_FILES
        do
                # TODO: the following substitution performs differently in script vs command line;
                # command line *requires* last slash to be escaped like this:
                # from_path="${overlay_file/\/\//\/}"
                # script *requires* last slash to *not* be escaped, so we use that here
                from_path="${overlay_file/\/\///}"

                to_path="$var_TARGET_DIR/${overlay_file#*\/\/}"
                # TODO: test if permissions are retained via --preserve-context
                # TODO: confirm backups are created correctly
                install -C -D -S ".archproto.old" --preserve-context -v -T "$from_path" "$to_path" \
                || die_error "failed to overlay file from \"$from_path\" to \"$to_path\""
        done
}

get_value()
{
    # get_config /dir/sub/filename valuename [returnvariable] (returns value via echo or returnvariable if present)
    local  __returnvarname=${3:-}; local config_file="$1"; local config_name="$2"; local config_value=
    [[ ! -f "$config_file" ]] && die_error "Shouldn't reach this error: get_config failed to find config file \"$config_file\"; this should be checked in caller."
    local config_line=$(egrep "^[[:space:]]*${config_name}" "${config_file}")
    [[ -n $config_line ]] && config_value=`echo -n $config_line | sed "s/.*$config_name.*=[[:space:]]*\(.*\)[[:space:]]*$/\1/"` || return 1
    config_value="$(unquote "$config_value")"
    [[ ! "$__returnvarname" ]] && echo -n "$config_value" || eval $__returnvarname=\"$config_value\"
}

# TODO: could make this (possibly too) clever by looking for commented out 
# lines and reusing those, but it's probably better to spend that effort 
# looking at augeas as a replacement
config_value()
{
    # set_config /config/file/path config_item_name config_item_value
    local config_method="$1"; shift; local config_file="$1"; shift; local config_name="$1"; shift; local config_value="$*"
    [[ ! -f "$config_file" ]] && d "Missing config file" "Config file \"$config_file\" not found; skipping" && return 1
    [[ "${config_value:0:1}" == "(" ]] && local quote= || quote='\"'
    if get_value "$config_file" "$config_name" current_value
    then
        case $config_method in
            set)   sed -i "s+\(^\s*${config_name}=\).*$+\1${quote}${config_value}${quote}+" "${config_file}" ;;
            unset) sed -i "s+\(^\s*${config_name}=.*$\)+#\1 # automatically commented out+" "${config_file}" ;;
        esac
    else
        case $config_method in
            set)   echo -e "\n${config_name}=${quote:1:1}${config_value}${quote:1:1} # automatically appended" >> "$config_file" ;;
            unset) : ;;
        esac
    fi
}

config_list ()
{
    local config_method="$1"; shift; local config_file="$1"; shift; local config_name="$1"; shift; local config_list="$*"
    [[ ! -f "$config_file" ]] && d "Missing config file" "Config file \"$config_file\" not found; skipping" && return 1
    get_value "$config_file" "$config_name" current_list && current_list=$(strip_punct "$current_list") || return 1
    for config_list_item in $config_list; do
        local new_list=
        for current_list_item in $current_list; do
            if [[ "$(strip_punct $config_list_item)" == "$(strip_punct $current_list_item)" ]]; then
                [[ "$config_method" == "set" ]] && new_list+="$config_list_item "
                config_list_item=
            else
                new_list+="$current_list_item "
            fi
        done
        new_list+="$config_list_item"
        current_list=$new_list
    done
    new_list="(${current_list% })"
    config_value set "$config_file" "$config_name" "$new_list"
}

config_switch ()
{
# config set /config/file/path CONFIG_ITME_NAME config value here
# daemons add @daemonname !daemontoblacklist normaldaemon
    local method=$1; shift
    local target_value=$(echo -n ${FUNCNAME[1]} | tr a-z A-Z)
    if [[ "$target_value" == "CONFIG" ]]
    then
        local target_function="config_value"
        local file_path="${var_TARGET_DIR}${1}"; shift
        local target_value="$1"; shift
    else
        local target_function="config_list"
        local file_path="$var_TARGET_DIR/etc/rc.conf"
    fi
    case $method in
        set|add) $target_function set $file_path $target_value $* && inform "$target_value SET: $*" || show_warning "Config Write Error" "FAILED $target_value SET: $*" ;;
        unset|remove|delete) "$target_function" unset $file_path $target_value $* && inform "$target_value UNSET: $*" || show_warning "FAILED $target_value UNSET: $*" ;;
    esac
}
config () { config_switch "$@"; }
daemons () { config_switch "$@"; }
modules () { config_switch "$@"; }

# ----------------------------------------------------------------------
# lib-software
# ----------------------------------------------------------------------
# functions that override or augment aif core lib-software.sh

installaur()
{
    # helper for our custom installpkg
    aur_package="$1"
    if [[ `pacman -Q "^$aur_package$"` ]]; then
        notify "$aur_package already installed; skipping"
    elif ! `pacman -Qs "^$aur_package$" &>/dev/null`
    then
        rm -rf $var_TEMP_DIR/$aur_package*
        local restore_dir=`pwd`
        mkdir -p $var_TEMP_DIR/${aur_package}-install && cd $var_TEMP_DIR/${aur_package}-install
        wget "http://aur.archlinux.org/packages/${aur_package}/${aur_package}.tar.gz"
        tar -xzvf "${aur_package}.tar.gz"
        cd "$aur_package"
        makepkg -s --asroot
        run_controlled pacman_installaur "$PACMAN_TARGET --noconfirm -U *.pkg.tar.xz" $TMP_PACMAN_LOG "Installing $aur_package..." 
        cd $restore_dir
        rm -rf $var_TEMP_DIR/${aur_package}-install
    else
        die_error "SHOULDN'T BE HERE: installaur() has been passed a package that pacman can find as well: $aur_package"
    fi
}

# perform package installation to the target system
# overriding this function from aif core's lib-software.sh so that we can fail 
# over to AUR install without having to specify if a package is AUR or not
installpkg() {
        ALL_PACKAGES=
        [ -n "$var_TARGET_GROUPS" ] && ALL_PACKAGES=`list_packages group "$var_TARGET_GROUPS" | awk '{print $2}'`
        if [ -n "$var_TARGET_PACKAGES_EXCLUDE" ]
        then
                for excl in $var_TARGET_PACKAGES_EXCLUDE
                do
                        ALL_PACKAGES=${ALL_PACKAGES//$excl/}
                done
        fi

        if [ -n "$var_TARGET_PACKAGES" ]
        then
                [ -n "$ALL_PACKAGES" ] && ALL_PACKAGES="$ALL_PACKAGES $var_TARGET_PACKAGES"
                [ -z "$ALL_PACKAGES" ] && ALL_PACKAGES=$var_TARGET_PACKAGES
        fi
        ALL_PACKAGES=`echo "$ALL_PACKAGES"`
        [ -z "$ALL_PACKAGES" ] && die_error "No packages/groups specified to install"

        target_special_fs on

        notify "Installing packages..."
        
        for package in $ALL_PACKAGES
        do
            if [[ `pacman -Q "^$package$" &>/dev/null` ]]; then
                inform "INSTALLATION: $package already installed; skipping"
            elif `pacman -Ss "^$package$" &>/dev/null`
            then
                run_controlled pacman_installpkg "$PACMAN_TARGET --noconfirm -S $package" $TMP_PACMAN_LOG "Installing $package..." 
            else
                installaur "$package" || return 1
            fi
        done

        local _result=''
        if [ $CONTROLLED_EXIT -ne 0 ]; then
                _result="Installation Failed (see errors below)"
                echo -e "\nPackage Installation FAILED." >>$TMP_PACMAN_LOG
        else
                _result="Installation Complete"
                echo -e "\nPackage Installation Complete." >>$TMP_PACMAN_LOG
        fi

        show_warning "$_result" "$TMP_PACMAN_LOG" text || return 1

        target_special_fs off
        sync

        return $CONTROLLED_EXIT
}
